#!/usr/bin/ruby

$: << File.join(File.dirname(__FILE__), "..", "lib")

require 'rubygems'
require 'mixlib/cli'
require 'dynomite'
require 'dynomite/config'

module Dynomite

  
  class CLI
    include Mixlib::CLI

    option :n,
    :short => '-n NODES',
    :long => '--nodes NODES',
    :description => 'Number of nodes in the cluster'

    option :r,
    :short => '-r READERS',
    :long => '--readers READERS',
    :description => "Number of readers"

    option :w,
    :short => '-r WRITERS',
    :long => '--writers WRITERS',
    :description => "Number of writers"  
    
    option :detached,
    :short => '-b',
    :long => '--background',
    :description => "Run in background (Detach from console)"
    
    option :cluster_name,
    :short => '-c CLUSTER_NAME',
    :long => '--cluster CLUSTER_NAME',
    :description => "Name of the Dynomite cluster"
    
    option :node_name,
    :short => '-o NODE_NAME',
    :long => '--node NODE_NAME',
    :description => "Name of this Dynomite node"
    
    option :join,
    :short => '-j NODE_NAME',
    :long => '--join NODE_NAME',
    :description => "Name of a Dynomite node to join to form a cluster"

    option :text_port,
    :short => '-a ASCII_PORT',
    :long => '--ascii-port ASCII_PORT',
    :description => "Port for ASCII protocol"
    
    option :thrift_port,
    :short => '-t THRIFT_PORT',
    :long => '--thrift-port THRIFT_PORT',
    :description => "Port for Thrift protocol"
    
    option :web_port,
    :short => '-w WEB_PORT',
    :long => '--web-port WEB_PORT',
    :description => "Port for web (HTTP)"
    
    option :directory,
    :short => '-d DIRECTORY',
    :long => '--directory DIRECTORY',
    :description => "Data directory"
    
    def run(args=ARGV)
      arg = parse_options(args)
      Dynomite::Config.merge!(config)
      
      [:thrift_port, :web_port, :text_port].each do |port|
        Dynomite::Config[port] = Dynomite::Config[port].to_i if Dynomite::Config.has_key? port
      end
      
      dn = Dynomite::Node.new( Dynomite::Config.hash_dup )

      if Dynomite::Config[:join]
        dn.start(:join=>Dynomite::Config[:join])
      else
        dn.start
     end
    end    
  end
  
end

Dynomite::CLI.new.run
